name: Create check run
description: Create check run with name and conclusion

inputs:
  check-run-name:
    description: 'Name of the check run'
    required: true

  conclusion:
    description: 'Conclusion of the check run'
    required: true

  title:
    description: 'Title of the check run body'
    required: false

  summary:
    description: 'Summary of the check run body'
    required: false

  text:
    description: 'Text of the check run body'
    required: false

  head-sha:
    description: 'The SHA of the pull request head.'
    default: ${{ github.event.pull_request.head.sha }}
    required: false

  target-repo:
    description: 'Target Repository name'
    default: ${{ github.repository }}
    required: false

  target-pr-number:
    description: 'Target Pull Request number'
    required: false

  github-token:
    description: 'GitHub API Access Token.'
    default: ${{ github.token }}
    required: false

outputs:
  check-run-id:
    description: 'The ID of the created check run.'
    value: ${{ steps.create-check-run.outputs.check-run-id }}

runs:
  using: "composite"
  steps:
    - name: Get Target SHA
      id: get-target-sha
      if: ${{ inputs.target-pr-number }}
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const targetPrNumber = ${{ inputs.target-pr-number }};
          const targetRepo = "${{ inputs.target-repo }}";

          const [owner, repo] = targetRepo.split('/');
          const prNumber = parseInt(targetPrNumber, 10);

          if (isNaN(prNumber)) {
            throw new Error(`Invalid PR number: ${targetPrNumber}`);
          }

          const pr = await github.rest.pulls.get({
            owner: owner,
            repo: repo,
            pull_number: prNumber
          });

          return pr.data.head.sha;
        result-encoding: string

    - name: Create Check Run
      id: create-check-run
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const [owner, repo] = "${{ inputs.target-repo }}".split('/');
          
          const checkRunData = {
            owner: owner,
            repo: repo,
            name: "${{ inputs.check-run-name }}",
            head_sha: "${{ steps.get-target-sha.outputs.result || inputs.head-sha || github.sha }}",
            status: 'completed',
            conclusion: "${{ inputs.conclusion }}"
          };
          
          const checkRunTitle = `${{ inputs.title }}`
          const checkRunSummary = `${{ inputs.summary }}`
          const checkRunText = `${{ inputs.text }}`
          
          if (checkRunTitle && checkRunSummary) {
            checkRunData.output = {
              title: checkRunTitle,
              summary: checkRunSummary
            };

            if (checkRunText) {
              checkRunData.output.text = checkRunText;
            }
          }
         
          const checkRun = await github.rest.checks.create(checkRunData);
          core.setOutput('check-run-id', checkRun.data.id);
