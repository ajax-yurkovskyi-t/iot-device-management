name: Ajax CI Gate
description: Checks if the passed jobs and check runs are successful and creates a check run with the result.

inputs:
  needs:
    description: "Needs JSON object with the jobs to check for a specific conclusion"
    required: true

  check-runs:
    description: "Comma-separated list of external IDs for the check runs to verify their conclusion status"
    required: false
    default: 'ajax-delta-coverage'

  check-run-name:
    description: "The name of the resulting check run"
    required: false
    default: "Ajax CI Gate"

  expected-conclusion:
    description: "The expected conclusion for all jobs"
    required: false
    default: "success"

  github-token:
    description: "GitHub API Access Token"
    default: ${{ github.token }}
    required: false

  target-repo:
    description: "Target Repository name (for testing purposes only)"
    default: ${{ github.repository }}
    required: false

  target-pr-number:
    description: "Target Pull Request number (for testing purposes only)"
    required: false

  head-sha:
    description: "The SHA of the pull request head."
    default: ${{ github.event.pull_request.head.sha }}
    required: false

outputs:
  check-run-id:
    description: "The ID of the created check run"
    value: ${{ steps.create-check-run.outputs.check-run-id }}

runs:
  using: "composite"
  steps:

    - name: Check Jobs Conclusion
      id: check-jobs-conclusion
      uses: actions/github-script@v7
      env:
        NEEDS_CONTEXT: ${{ inputs.needs }}
      with:
        github-token: ${{ inputs.github-token }}
        result-encoding: json
        script: |
          const needs = JSON.parse(process.env.NEEDS_CONTEXT);

          let checkResult = true;
          let failedJobs = [];
          let allJobs = [];

          let expectedMessage = `## Required job list\n`;
          let failedJobsMessage = `#### This check run failed because the following jobs were not successful:\n`;
          
          for (const job in needs) {
            allJobs.push(`- ${job}`);
            if (needs[job].result !== "${{ inputs.expected-conclusion }}") {
              checkResult = false;
              failedJobs.push(`- ${job}: ${needs[job].result}`);
            }
          }

          expectedMessage += allJobs.join(`\n`);

          if (failedJobs.length > 0) {
            failedJobsMessage += failedJobs.join(`\n`);
          } else {
            failedJobsMessage = `All required jobs passed successfully`;
          }

          const finalMessage = `${expectedMessage}\n\n${failedJobsMessage}`;

          const failedJobsMetadata = `<!-- FAILED_JOBS: ${JSON.stringify(failedJobs)} -->`;

          core.setOutput("check-result", checkResult);
          core.setOutput("check-summary", finalMessage);
          core.setOutput("failed-jobs-metadata", failedJobsMetadata);
          

    - name: Check Runs Conclusion
      id: check-runs-conclusion
      if: ${{ inputs.check-runs }}
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        result-encoding: json
        script: |
          const externalIds = "${{ inputs.check-runs }}".split(',').map(id => id.trim());
          const targetRepo = "${{ inputs.target-repo }}";
          const [owner, repo] = targetRepo.split('/');
          const checkRunsResponse = await github.rest.checks.listForRef({ 
            owner: owner, 
            repo: repo, 
            ref: "${{ inputs.head-sha }}"
          });

          let checkResult = true;
          let failedCheckRuns = [];
          let allCheckRuns = [];

          let expectedMessage = `## Required check run list\n`;
          let failedCheckRunsMessage = `#### This check run failed because the following check runs were not successful:\n`;

          const filteredCheckRuns = checkRunsResponse.data.check_runs.filter(
            checkRun => externalIds.includes(checkRun.external_id)
          );

          for (const checkRun of filteredCheckRuns) {
            allCheckRuns.push(`- ${checkRun.name}`);
            if (checkRun.conclusion === 'failure') {
              checkResult = false;
              failedCheckRuns.push(checkRun.name);
            }
          }

          expectedMessage += allCheckRuns.join(`\n`);

          if (failedCheckRuns.length > 0) {
            failedCheckRunsMessage += failedCheckRuns.map(name => `- ${name}`).join(`\n`);
          } else {
            failedCheckRunsMessage = `All required check runs passed successfully`;
          }

          const finalMessage = `${expectedMessage}\n\n${failedCheckRunsMessage}`;

          const failedCheckRunsMetadata = `<!-- FAILED_CHECK_RUNS: ${JSON.stringify(failedCheckRuns)} -->`;

          core.setOutput("check-result", checkResult);
          core.setOutput("check-summary", finalMessage);
          core.setOutput("failed-check-runs-metadata", failedCheckRunsMetadata);

    - name: Prepare Check Run Inputs
      id: prepare-check-run-inputs
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const checkJobsResult = "${{ steps.check-jobs-conclusion.outputs.check-result }}";
          const checkRunsResult = "${{ steps.check-runs-conclusion.outputs.check-result }}";

          let conclusion = "failure";
          let title = "Some required checks are not successful";
          
          if (checkJobsResult === "true" && (checkRunsResult === "true" || !checkRunsResult)) {
            conclusion = "success";
            title = "All required checks are successful";
          }

          core.setOutput("conclusion", conclusion);  
          core.setOutput("check-title", title);
    

    - name: Create check run
      uses: ajax-yurkovskyi-t/iot-device-management/.github/create-check-run@feature/delta-coverage-test
      id: create-check-run
      with:
        check-run-name: ${{ inputs.check-run-name }}
        conclusion: ${{ steps.prepare-check-run-inputs.outputs.conclusion }}
        github-token: ${{ inputs.github-token }}
        title: ${{ steps.prepare-check-run-inputs.outputs.check-title }}
        summary: |
          ${{ steps.check-jobs-conclusion.outputs.check-summary }}
          
          ${{ steps.check-runs-conclusion.outputs.check-summary }}
          
          ${{ steps.check-jobs-conclusion.outputs.failed-jobs-metadata }}
          ${{ steps.check-runs-conclusion.outputs.failed-check-runs-metadata }}
        target-pr-number: ${{ inputs.target-pr-number }}
        target-repo: ${{ inputs.target-repo }}
